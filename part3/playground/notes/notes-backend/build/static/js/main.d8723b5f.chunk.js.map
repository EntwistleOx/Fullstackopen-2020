{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","key","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,oBAAsB,iBAErD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCC3BK,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAEF,yBAAKJ,UAAU,SAASI,ICalBC,EAjBA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uG,gBCTAC,EAAU,qDAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCwE9BK,EAnFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBlB,MAAK,SAACC,GACzBS,EAAST,QAEV,IAEH,IAkBMkB,EAAcN,EAChBJ,EACAA,EAAMW,QAAO,SAACrC,GAAD,OAA6B,IAAnBA,EAAKG,aAsBhC,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASwB,IACvB,6BACE,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGM,EAAYE,KAAI,SAACtC,GAChB,OACE,kBAAC,EAAD,CACEuC,IAAKvC,EAAKsB,GACVtB,KAAMA,EACNC,iBAAkB,kBAnCH,SAACqB,GAC1B,IAAMtB,EAAO0B,EAAMc,MAAK,SAACC,GAAD,OAAOA,EAAEnB,KAAOA,KAClCoB,EAAW,2BAAQ1C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACUb,EAAIoB,GACXzB,MAAK,SAACC,GACLS,EAASD,EAAMY,KAAI,SAACtC,GAAD,OAAWA,EAAKsB,KAAOA,EAAKtB,EAAOkB,SAEvDyB,OAAM,SAACC,GACNX,EAAgB,YAAD,OACDjC,EAAKK,QADJ,qCAGfwC,YAAW,WACTZ,EAAgB,QACf,KACHN,EAASD,EAAMW,QAAO,SAACI,GAAD,OAAOA,EAAEnB,KAAOA,SAmBRwB,CAAmB9C,EAAKsB,WAKxD,0BAAMyB,SA9DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASuB,EACTuB,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAG7BpB,EAAmBe,GAAYjC,MAAK,SAACC,GACnCS,EAASD,EAAM8B,OAAOtC,IACtBW,EAAW,SAqDT,2BAAO4B,MAAO7B,EAAS8B,SAjDJ,SAACV,GACxBnB,EAAWmB,EAAMW,OAAOF,UAiDpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC1DNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d8723b5f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make no important' : 'make important';\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className='error'>{message}</div>;\n};\n\nexport default Notification;\n","import React from 'react';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/api/notes';\nconst baseUrl = 'https://jdev-notes-backend.herokuapp.com/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((response) => {\n      setNotes(response);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((response) => {\n      setNotes(notes.concat(response));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((response) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : response)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `The note ${note.content} was already deleted from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => {\n          return (\n            <Note\n              key={note.id}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          );\n        })}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type='submit'>save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true,\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only Javascript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false,\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true,\n//   },\n// ];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}